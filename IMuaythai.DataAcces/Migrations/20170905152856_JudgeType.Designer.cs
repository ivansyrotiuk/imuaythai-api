// <auto-generated />

using System;
using IMuaythai.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;

namespace IMuaythai.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20170905152856_JudgeType")]
    partial class JudgeType
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MuaythaiSportManagementSystemApi.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Accepted");

                    b.Property<int>("AccessFailedCount");

                    b.Property<DateTime>("Birthdate");

                    b.Property<string>("CoachLevel")
                        .HasMaxLength(100);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<int?>("CountryId");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("Facebook")
                        .HasMaxLength(500);

                    b.Property<string>("FirstName")
                        .HasMaxLength(500);

                    b.Property<string>("Gender")
                        .HasMaxLength(10);

                    b.Property<string>("Instagram")
                        .HasMaxLength(500);

                    b.Property<int?>("InstitutionId");

                    b.Property<int?>("KhanLevelId");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Nationality")
                        .HasMaxLength(500);

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("Phone")
                        .HasMaxLength(60);

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("Photo")
                        .HasMaxLength(1000);

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("Surname")
                        .HasMaxLength(500);

                    b.Property<string>("Twitter")
                        .HasMaxLength(500);

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<int>("Type");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<string>("VK")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("KhanLevelId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("MuaythaiSportManagementSystemApi.Models.Contest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<bool>("AllowUnassociated");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int?>("ContestRangeId");

                    b.Property<int?>("ContestTypeId");

                    b.Property<int>("CountryId");

                    b.Property<DateTime>("Date");

                    b.Property<int>("Duration");

                    b.Property<DateTime>("EndRegistrationDate");

                    b.Property<string>("Facebook")
                        .HasMaxLength(500);

                    b.Property<string>("Instagram")
                        .HasMaxLength(500);

                    b.Property<int>("InstitutionId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("RingsCount");

                    b.Property<string>("Twitter")
                        .HasMaxLength(500);

                    b.Property<string>("VK")
                        .HasMaxLength(500);

                    b.Property<int>("WaiKhruTime");

                    b.Property<string>("Website")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("ContestRangeId");

                    b.HasIndex("ContestTypeId");

                    b.HasIndex("CountryId");

                    b.HasIndex("InstitutionId");

                    b.ToTable("Contests");
                });

            modelBuilder.Entity("MuaythaiSportManagementSystemApi.Models.ContestCategoriesMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ContestCategoryId");

                    b.Property<int>("ContestId");

                    b.HasKey("Id");

                    b.HasIndex("ContestCategoryId");

                    b.HasIndex("ContestId");

                    b.ToTable("ContestCategoriesMappings");
                });

            modelBuilder.Entity("MuaythaiSportManagementSystemApi.Models.ContestCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ContestTypePointsId");

                    b.Property<int>("FightStructureId");

                    b.Property<int?>("InstitutionId");

                    b.Property<string>("Name");

                    b.Property<int>("ServiceBreakDuration");

                    b.HasKey("Id");

                    b.HasIndex("ContestTypePointsId");

                    b.HasIndex("FightStructureId");

                    b.HasIndex("InstitutionId");

                    b.ToTable("ContestCategories");
                });

            modelBuilder.Entity("MuaythaiSportManagementSystemApi.Models.ContestDocumentsMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("DocumentId");

                    b.Property<int?>("InstitutionId");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("InstitutionId");

                    b.ToTable("ContestDocumentsMapping");
                });

            modelBuilder.Entity("MuaythaiSportManagementSystemApi.Models.ContestRange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("ContestRanges");
                });

            modelBuilder.Entity("MuaythaiSportManagementSystemApi.Models.ContestRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AcceptanceDate");

                    b.Property<string>("AcceptedByUserId");

                    b.Property<int?>("ContestCategoryId");

                    b.Property<int>("ContestId");

                    b.Property<int?>("InstitutionId");

                    b.Property<DateTime>("IssueDate");

                    b.Property<int?>("JudgeType");

                    b.Property<int>("Status");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AcceptedByUserId");

                    b.HasIndex("ContestCategoryId");

                    b.HasIndex("ContestId");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("UserId");

                    b.ToTable("ContestRequests");
                });

            modelBuilder.Entity("MuaythaiSportManagementSystemApi.Models.ContestRing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ContestId");

                    b.Property<DateTime>("From");

                    b.Property<string>("Name");

                    b.Property<DateTime>("To");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.ToTable("ContestRings");
                });

            modelBuilder.Entity("MuaythaiSportManagementSystemApi.Models.ContestType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("ContestTypes");
                });

            modelBuilder.Entity("MuaythaiSportManagementSystemApi.Models.ContestTypePoints", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ContestRangeId");

                    b.Property<int>("ContestTypeId");

                    b.Property<int?>("InstitutionId");

                    b.Property<decimal>("Points");

                    b.HasKey("Id");

                    b.HasIndex("ContestRangeId");

                    b.HasIndex("ContestTypeId");

                    b.HasIndex("InstitutionId");

                    b.ToTable("ContestTypePoints");
                });

            modelBuilder.Entity("MuaythaiSportManagementSystemApi.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Continent");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("MuaythaiSportManagementSystemApi.Models.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<int>("Type");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("MuaythaiSportManagementSystemApi.Models.ExecutionBoard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ExecutionPosition");

                    b.Property<int?>("InstitutionId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("UserId");

                    b.ToTable("ExecutionBoards");
                });

            modelBuilder.Entity("MuaythaiSportManagementSystemApi.Models.Fight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BlueAthleteId");

                    b.Property<int?>("ContestCategoryId");

                    b.Property<int>("ContestId");

                    b.Property<byte?>("KO");

                    b.Property<int?>("KOTime");

                    b.Property<int?>("NextFightId");

                    b.Property<string>("RedAthleteId");

                    b.Property<string>("RefereeId");

                    b.Property<string>("Ring");

                    b.Property<DateTime?>("StartDate");

                    b.Property<int>("StructureId");

                    b.Property<string>("TimeKeeperId");

                    b.Property<string>("WinnerId");

                    b.HasKey("Id");

                    b.HasIndex("BlueAthleteId");

                    b.HasIndex("ContestCategoryId");

                    b.HasIndex("ContestId");

                    b.HasIndex("NextFightId");

                    b.HasIndex("RedAthleteId");

                    b.HasIndex("RefereeId");

                    b.HasIndex("StructureId");

                    b.HasIndex("TimeKeeperId");

                    b.HasIndex("WinnerId");

                    b.ToTable("Fights");
                });

            modelBuilder.Entity("MuaythaiSportManagementSystemApi.Models.FightJudgesMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FightId");

                    b.Property<string>("JudgeId");

                    b.Property<int>("Main");

                    b.HasKey("Id");

                    b.HasIndex("FightId");

                    b.HasIndex("JudgeId");

                    b.ToTable("FightJudgesMappings");
                });

            modelBuilder.Entity("MuaythaiSportManagementSystemApi.Models.FightPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Accepted");

                    b.Property<int>("Cautions");

                    b.Property<int>("FightId");

                    b.Property<string>("FighterId");

                    b.Property<string>("Injury");

                    b.Property<int?>("InjuryTime");

                    b.Property<int>("J");

                    b.Property<string>("JudgeId");

                    b.Property<int>("KnockDown");

                    b.Property<int>("Points");

                    b.Property<int>("RoundId");

                    b.Property<int>("Warnings");

                    b.Property<int>("X");

                    b.HasKey("Id");

                    b.HasIndex("FightId");

                    b.HasIndex("FighterId");

                    b.HasIndex("JudgeId");

                    b.ToTable("FightPoints");
                });

            modelBuilder.Entity("MuaythaiSportManagementSystemApi.Models.FightStructure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("RoundId");

                    b.Property<int>("WeightAgeCategoryId");

                    b.HasKey("Id");

                    b.HasIndex("RoundId");

                    b.HasIndex("WeightAgeCategoryId");

                    b.ToTable("FightStructures");
                });

            modelBuilder.Entity("MuaythaiSportManagementSystemApi.Models.Institution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(500);

                    b.Property<string>("City")
                        .HasMaxLength(500);

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(500);

                    b.Property<int>("CountryId");

                    b.Property<string>("Email")
                        .HasMaxLength(500);

                    b.Property<string>("Facebook")
                        .HasMaxLength(500);

                    b.Property<string>("HeadCoachId");

                    b.Property<string>("Instagram")
                        .HasMaxLength(500);

                    b.Property<int>("InstitutionType");

                    b.Property<string>("Logo")
                        .HasMaxLength(1000);

                    b.Property<int>("MembersCount");

                    b.Property<string>("Name")
                        .HasMaxLength(500);

                    b.Property<string>("Owner")
                        .HasMaxLength(500);

                    b.Property<string>("Phone")
                        .HasMaxLength(100);

                    b.Property<string>("Twitter")
                        .HasMaxLength(500);

                    b.Property<string>("VK")
                        .HasMaxLength(500);

                    b.Property<string>("Website")
                        .HasMaxLength(500);

                    b.Property<string>("ZipCode");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("HeadCoachId");

                    b.ToTable("Institutions");
                });

            modelBuilder.Entity("MuaythaiSportManagementSystemApi.Models.InstitutionDocumentsMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("DocumentId");

                    b.Property<int?>("InstitutionId");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("InstitutionId");

                    b.ToTable("InstitutionDocumentsMappings");
                });

            modelBuilder.Entity("MuaythaiSportManagementSystemApi.Models.KhanLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Level");

                    b.Property<string>("Name")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("KhanLevels");
                });

            modelBuilder.Entity("MuaythaiSportManagementSystemApi.Models.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CountryId");

                    b.Property<string>("ProvinceName")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("MuaythaiSportManagementSystemApi.Models.Reminder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Confirmed");

                    b.Property<DateTime>("CreateDate");

                    b.Property<DateTime>("SendDate");

                    b.Property<string>("Text")
                        .HasMaxLength(500);

                    b.Property<string>("Title")
                        .HasMaxLength(500);

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Reminders");
                });

            modelBuilder.Entity("MuaythaiSportManagementSystemApi.Models.Round", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BreakDuration");

                    b.Property<int>("Duration");

                    b.Property<string>("Name");

                    b.Property<int>("RoundsCount");

                    b.HasKey("Id");

                    b.ToTable("Rounds");
                });

            modelBuilder.Entity("MuaythaiSportManagementSystemApi.Models.Suspension", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<DateTime>("From");

                    b.Property<int?>("SuspensionTypeId");

                    b.Property<DateTime?>("To");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("SuspensionTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Suspensions");
                });

            modelBuilder.Entity("MuaythaiSportManagementSystemApi.Models.SuspensionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Localization");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("SuspensionTypes");
                });

            modelBuilder.Entity("MuaythaiSportManagementSystemApi.Models.UserDocumentsMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("DocumentId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDocumentsMappings");
                });

            modelBuilder.Entity("MuaythaiSportManagementSystemApi.Models.UserRoleRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AcceptationDate");

                    b.Property<string>("AcceptedByUserId");

                    b.Property<int?>("InstitutionId");

                    b.Property<string>("RoleId");

                    b.Property<int>("Status");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AcceptedByUserId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoleRequests");
                });

            modelBuilder.Entity("MuaythaiSportManagementSystemApi.Models.WeightAgeCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Gender");

                    b.Property<int>("MaxAge");

                    b.Property<decimal>("MaxWeight");

                    b.Property<int>("MinAge");

                    b.Property<decimal>("MinWeight");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("WeightAgeCategories");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MuaythaiSportManagementSystemApi.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MuaythaiSportManagementSystemApi.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MuaythaiSportManagementSystemApi.Models.ApplicationUser")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MuaythaiSportManagementSystemApi.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MuaythaiSportManagementSystemApi.Models.ApplicationUser", b =>
                {
                    b.HasOne("MuaythaiSportManagementSystemApi.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("MuaythaiSportManagementSystemApi.Models.Institution", "Institution")
                        .WithMany("Users")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MuaythaiSportManagementSystemApi.Models.KhanLevel", "KhanLevel")
                        .WithMany("Users")
                        .HasForeignKey("KhanLevelId");
                });

            modelBuilder.Entity("MuaythaiSportManagementSystemApi.Models.Contest", b =>
                {
                    b.HasOne("MuaythaiSportManagementSystemApi.Models.ContestRange", "ContestRange")
                        .WithMany("Contests")
                        .HasForeignKey("ContestRangeId");

                    b.HasOne("MuaythaiSportManagementSystemApi.Models.ContestType", "ContestType")
                        .WithMany("Contests")
                        .HasForeignKey("ContestTypeId");

                    b.HasOne("MuaythaiSportManagementSystemApi.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MuaythaiSportManagementSystemApi.Models.Institution", "Institution")
                        .WithMany("Contests")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MuaythaiSportManagementSystemApi.Models.ContestCategoriesMapping", b =>
                {
                    b.HasOne("MuaythaiSportManagementSystemApi.Models.ContestCategory", "ContestCategory")
                        .WithMany()
                        .HasForeignKey("ContestCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MuaythaiSportManagementSystemApi.Models.Contest", "Contest")
                        .WithMany("ContestCategoriesMappings")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MuaythaiSportManagementSystemApi.Models.ContestCategory", b =>
                {
                    b.HasOne("MuaythaiSportManagementSystemApi.Models.ContestTypePoints", "ContestTypePoints")
                        .WithMany("Categories")
                        .HasForeignKey("ContestTypePointsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MuaythaiSportManagementSystemApi.Models.FightStructure", "FightStructure")
                        .WithMany("ContestCategories")
                        .HasForeignKey("FightStructureId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MuaythaiSportManagementSystemApi.Models.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionId");
                });

            modelBuilder.Entity("MuaythaiSportManagementSystemApi.Models.ContestDocumentsMapping", b =>
                {
                    b.HasOne("MuaythaiSportManagementSystemApi.Models.Document", "Document")
                        .WithMany("ContestDocumentsMappings")
                        .HasForeignKey("DocumentId");

                    b.HasOne("MuaythaiSportManagementSystemApi.Models.Contest", "Institution")
                        .WithMany("ContestDocumentsMappings")
                        .HasForeignKey("InstitutionId");
                });

            modelBuilder.Entity("MuaythaiSportManagementSystemApi.Models.ContestRequest", b =>
                {
                    b.HasOne("MuaythaiSportManagementSystemApi.Models.ApplicationUser", "AcceptedByUser")
                        .WithMany("AcceptedContestRequests")
                        .HasForeignKey("AcceptedByUserId");

                    b.HasOne("MuaythaiSportManagementSystemApi.Models.ContestCategory", "ContestCategory")
                        .WithMany("ContestRequests")
                        .HasForeignKey("ContestCategoryId");

                    b.HasOne("MuaythaiSportManagementSystemApi.Models.Contest", "Contest")
                        .WithMany("ContestRequests")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MuaythaiSportManagementSystemApi.Models.Institution", "Institution")
                        .WithMany("ContestRequests")
                        .HasForeignKey("InstitutionId");

                    b.HasOne("MuaythaiSportManagementSystemApi.Models.ApplicationUser", "User")
                        .WithMany("ContestRequests")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MuaythaiSportManagementSystemApi.Models.ContestRing", b =>
                {
                    b.HasOne("MuaythaiSportManagementSystemApi.Models.Contest", "Contest")
                        .WithMany("Rings")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MuaythaiSportManagementSystemApi.Models.ContestTypePoints", b =>
                {
                    b.HasOne("MuaythaiSportManagementSystemApi.Models.ContestRange", "ContestRange")
                        .WithMany()
                        .HasForeignKey("ContestRangeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MuaythaiSportManagementSystemApi.Models.ContestType", "ContestType")
                        .WithMany()
                        .HasForeignKey("ContestTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MuaythaiSportManagementSystemApi.Models.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionId");
                });

            modelBuilder.Entity("MuaythaiSportManagementSystemApi.Models.ExecutionBoard", b =>
                {
                    b.HasOne("MuaythaiSportManagementSystemApi.Models.Institution", "Institution")
                        .WithMany("ExecutionBoards")
                        .HasForeignKey("InstitutionId");

                    b.HasOne("MuaythaiSportManagementSystemApi.Models.ApplicationUser", "User")
                        .WithMany("ExecutionBoards")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MuaythaiSportManagementSystemApi.Models.Fight", b =>
                {
                    b.HasOne("MuaythaiSportManagementSystemApi.Models.ApplicationUser", "BlueAthlete")
                        .WithMany("AsBlueFights")
                        .HasForeignKey("BlueAthleteId");

                    b.HasOne("MuaythaiSportManagementSystemApi.Models.ContestCategory", "ContestCategory")
                        .WithMany()
                        .HasForeignKey("ContestCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MuaythaiSportManagementSystemApi.Models.Contest", "Contest")
                        .WithMany("Fights")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MuaythaiSportManagementSystemApi.Models.Fight", "NextFight")
                        .WithMany()
                        .HasForeignKey("NextFightId");

                    b.HasOne("MuaythaiSportManagementSystemApi.Models.ApplicationUser", "RedAthlete")
                        .WithMany("AsRedFights")
                        .HasForeignKey("RedAthleteId");

                    b.HasOne("MuaythaiSportManagementSystemApi.Models.ApplicationUser", "Referee")
                        .WithMany("AsRefereeFights")
                        .HasForeignKey("RefereeId");

                    b.HasOne("MuaythaiSportManagementSystemApi.Models.FightStructure", "Structure")
                        .WithMany("Fights")
                        .HasForeignKey("StructureId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MuaythaiSportManagementSystemApi.Models.ApplicationUser", "TimeKeeper")
                        .WithMany("AsTimeKeeperFights")
                        .HasForeignKey("TimeKeeperId");

                    b.HasOne("MuaythaiSportManagementSystemApi.Models.ApplicationUser", "Winner")
                        .WithMany("WonFights")
                        .HasForeignKey("WinnerId");
                });

            modelBuilder.Entity("MuaythaiSportManagementSystemApi.Models.FightJudgesMapping", b =>
                {
                    b.HasOne("MuaythaiSportManagementSystemApi.Models.Fight", "Fight")
                        .WithMany("FightJudgesMappings")
                        .HasForeignKey("FightId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MuaythaiSportManagementSystemApi.Models.ApplicationUser", "Judge")
                        .WithMany("FightJudgesMappings")
                        .HasForeignKey("JudgeId");
                });

            modelBuilder.Entity("MuaythaiSportManagementSystemApi.Models.FightPoint", b =>
                {
                    b.HasOne("MuaythaiSportManagementSystemApi.Models.Fight", "Fight")
                        .WithMany("FightPoints")
                        .HasForeignKey("FightId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MuaythaiSportManagementSystemApi.Models.ApplicationUser", "Fighter")
                        .WithMany("FightPoints")
                        .HasForeignKey("FighterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MuaythaiSportManagementSystemApi.Models.ApplicationUser", "Judge")
                        .WithMany("JudgeFightPoints")
                        .HasForeignKey("JudgeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MuaythaiSportManagementSystemApi.Models.FightStructure", b =>
                {
                    b.HasOne("MuaythaiSportManagementSystemApi.Models.Round", "Round")
                        .WithMany()
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MuaythaiSportManagementSystemApi.Models.WeightAgeCategory", "WeightAgeCategory")
                        .WithMany()
                        .HasForeignKey("WeightAgeCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MuaythaiSportManagementSystemApi.Models.Institution", b =>
                {
                    b.HasOne("MuaythaiSportManagementSystemApi.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MuaythaiSportManagementSystemApi.Models.ApplicationUser", "HeadCoach")
                        .WithMany()
                        .HasForeignKey("HeadCoachId");
                });

            modelBuilder.Entity("MuaythaiSportManagementSystemApi.Models.InstitutionDocumentsMapping", b =>
                {
                    b.HasOne("MuaythaiSportManagementSystemApi.Models.Document", "Document")
                        .WithMany("InstitutionDocumentsMappings")
                        .HasForeignKey("DocumentId");

                    b.HasOne("MuaythaiSportManagementSystemApi.Models.Institution", "Institution")
                        .WithMany("InstitutionDocumentsMappings")
                        .HasForeignKey("InstitutionId");
                });

            modelBuilder.Entity("MuaythaiSportManagementSystemApi.Models.Province", b =>
                {
                    b.HasOne("MuaythaiSportManagementSystemApi.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MuaythaiSportManagementSystemApi.Models.Reminder", b =>
                {
                    b.HasOne("MuaythaiSportManagementSystemApi.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MuaythaiSportManagementSystemApi.Models.Suspension", b =>
                {
                    b.HasOne("MuaythaiSportManagementSystemApi.Models.SuspensionType", "SuspensionType")
                        .WithMany("Suspensions")
                        .HasForeignKey("SuspensionTypeId");

                    b.HasOne("MuaythaiSportManagementSystemApi.Models.ApplicationUser", "User")
                        .WithMany("Suspensions")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MuaythaiSportManagementSystemApi.Models.UserDocumentsMapping", b =>
                {
                    b.HasOne("MuaythaiSportManagementSystemApi.Models.Document", "Document")
                        .WithMany("UserDocumentsMappings")
                        .HasForeignKey("DocumentId");

                    b.HasOne("MuaythaiSportManagementSystemApi.Models.ApplicationUser", "User")
                        .WithMany("UserDocimentsMappings")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MuaythaiSportManagementSystemApi.Models.UserRoleRequest", b =>
                {
                    b.HasOne("MuaythaiSportManagementSystemApi.Models.ApplicationUser", "AcceptedByUser")
                        .WithMany()
                        .HasForeignKey("AcceptedByUserId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.HasOne("MuaythaiSportManagementSystemApi.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
